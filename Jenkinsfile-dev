pipeline {
    agent any
    stages {
        stage('git pull') {
            steps {
                git branch: 'dev',
                    url: 'https://github.com/dlwlgh9412/Retromall.git'
            }

            post {
                success {
                    sh 'echo "git pull success"'
                }

                failure {
                    sh 'echo "git pull failed"'
                }
            }
        }
    }

    stage('build') {
        steps {
            sh 'chmod +x gradlew'
            sh './gradlew clean build'
            sh 'ls -al ./build'
        }
        post {
            success {
                sh 'echo "gradle build success"'
            }

            failure {
                sh 'echo "gradle build failed"'
            }
        }
    }

    stage('publish on ssh') {
        steps {
            sshPublisher(
                publishers: [
                    sshPublisherDesc(
                        configName: 'retromall',
                        transfers:
                            [sshTransfer(
                                cleanRemote: false,
                                excludes: '',
                                execCommand: 'sh /home/ubuntu/docker/retromall/dev/retromall-dockerfile.sh',
                                execTimeout: 120000,
                                flatten: false,
                                makeEmptyDirs: false,
                                noDefaultExcludes: false,
                                patternSeparator: '[, ]+',
                                remoteDirectory: '/docker/retromall/dev',
                                remoteDirectorySDF: false,
                                removePrefix: 'build/libs',
                                sourceFiles: 'build/libs/*jar'
                                )
                            ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false
                    )
                ]
            )
        }
    }



    stage('docker image build') {
        steps {
            sh 'cd /home/ubuntu/docker/retromall/dev'
            sh 'docker build --tag retromall:0.5 .'
        }
    }

    stage('docker compose down') {
        steps {
            sh 'echo "docker compose down'
            sh 'docker-compose down'
        }
        post {
            success {
                sh 'echo "docker compose down success"'
            }
            failure {
                sh 'echo "docker compose down failed'
            }
        }
    }


    stage('docker build') {
        steps {
            sh 'echo "docker build"'
            sh 'docker-compose up -d --build'
            sh 'docker-compose ps'
        }
        post {
            success {
                sh 'echo "docker build success"'
            }
            failure{
                sh 'echo "docker build failed"'
            }
        }
    }
}